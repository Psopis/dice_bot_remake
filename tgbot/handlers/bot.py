import asyncio

from aiogram import Bot, types
from aiogram.types import CallbackQuery
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters.builtin import Command
from aiogram.utils import executor
from aiogram.dispatcher.storage import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from tgbot import config
# import utils
from tgbot.utils import telebot_part
from tgbot.utils.misc.states import States, Admin
from tgbot import keyboards
from tgbot.utils.dp_api import datab
from tgbot.utils.qiwi_api import qiwi

bot = Bot(config.TOKEN)
memory_storage = MemoryStorage()
dp = Dispatcher(bot, storage=memory_storage)

database = datab.Sqlite()
pays = datab.PaymentDb()

Admin_Keyboards = keyboards.inline.AdminPanel()


@dp.message_handler(Command("start"))
async def start(message: types.message):  # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–∞–Ω–¥—É /start
    await bot.send_message(message.chat.id,
                           "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–µ–µ –∫–∞–∑–∏–Ω–æ",
                           reply_markup=keyboards.reply.main_keyboard())
    database.user_exist(message.chat.id)


@dp.message_handler(Command("admin"))
async def join_into_a_panel(message: types.message):  # –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    if message.chat.id in config.ADMINS_ID:
        await bot.send_message(chat_id=message.chat.id,
                               text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!",
                               reply_markup=Admin_Keyboards.in_admin_panel())


@dp.callback_query_handler(text="qiwibalance")
async def send_qiwi_balance(call: CallbackQuery):
    await bot.send_message(chat_id=call.message.chat.id, text=f"{qiwi.check_balance()} —Ä—É–±–ª–µ–π")
    await call.answer()


@dp.callback_query_handler(text="admin_withdraw")
async def choose_withdraw(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥",
                                reply_markup=Admin_Keyboards.gen_all_withdraws())
    await call.answer()


@dp.callback_query_handler(text_contains="withdrawaccept")
async def give_withdraw_info(call: CallbackQuery):
    data = call.data.split(":")
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞: {data[1]}\n"
                                     f"–°—É–º–º–∞ –Ω–∞ –≤—ã–≤–æ–¥: {data[2]}\n"
                                     f"–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: {qiwi.check_balance()}",
                                reply_markup=Admin_Keyboards.withdraw_info(data[1], data[2], data[3]))
    await call.answer()


@dp.callback_query_handler(text_contains="okwithdraw")
async def withdraw(call: CallbackQuery):
    await call.answer()
    data = call.data.split(":")
    if qiwi.withdraw(data[1], data[2]):
        await call.answer(text="–í—ã–≤–æ–¥ –≤—Ä–æ–¥–µ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω, –Ω–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —è —Ö–∑", show_alert=True)
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!",
                                    reply_markup=Admin_Keyboards.in_admin_panel())
        pays.delete_withdraw(data[3])
    else:
        await call.answer(text="–¢–µ–Ω—å–≥–µ –Ω–µ–º–∞, —Å—É–∫", show_alert=True)
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!",
                                    reply_markup=Admin_Keyboards.in_admin_panel())


@dp.callback_query_handler(text_contains="delete")
async def delete_withdraw(call: CallbackQuery):
    data = call.data.split(":")
    await call.answer(text="–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞", show_alert=True)
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!",
                                reply_markup=Admin_Keyboards.in_admin_panel())
    pays.delete_withdraw(data[1])


@dp.callback_query_handler(text="mailing")
async def confirm_mail(call: CallbackQuery):
    await Admin.Mailing.set()
    await call.answer()
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="backadminpanel")
    markup.add(btn)
    await bot.send_message(call.message.chat.id,
                           "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∞—á–∫—É",
                           reply_markup=markup)


@dp.callback_query_handler(text="play")
async def play_button(call: CallbackQuery):  # –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
    await bot.edit_message_text(text="üé≠ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:",
                                message_id=call.message.message_id,
                                chat_id=call.message.chat.id,
                                reply_markup=keyboards.inline.games_markup(database.gen_games()))
    await call.answer()


@dp.callback_query_handler(text_contains="game")
async def choose_game(call: CallbackQuery):  # –í—ã–±–æ—Ä –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–≥—Ä—ã
    game_id = call.data.split(":")
    res = database.check_play(call.message.chat.id, game_id[1])
    if res:
        await bot.edit_message_text(text=f"–ò–≥—Ä–∞ –Ω–æ–º–µ—Ä: {game_id[1]}\n"
                                         f"–°—É–º–º–∞: {game_id[2]}\n"
                                         f"–°–æ–∑–¥–∞—Ç–µ–ª—å –∏–≥—Ä—ã: @{res}\n"
                                         f"\n–í–Ω–∏–º–∞–Ω–∏–µ! –î–µ–π—Å—Ç–≤–∏–µ –±—Ä–æ—Å–∫–∞ –æ—Ç–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è",
                                    message_id=call.message.message_id,
                                    chat_id=call.message.chat.id,
                                    reply_markup=keyboards.inline.accept_game_markup(game_id[1]))
    else:
        await bot.edit_message_text(text=f"–ò–≥—Ä–∞ –Ω–æ–º–µ—Ä: {game_id[1]}\n"
                                         f"–°—É–º–º–∞: {game_id[2]}\n"
                                         f"\n–≠—Ç–æ –≤–∞—à–∞ –∏–≥—Ä–∞. –û–∂–∏–¥–∞–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!",
                                    message_id=call.message.message_id,
                                    chat_id=call.message.chat.id,
                                    reply_markup=keyboards.inline.accept_game_markup(game_id[1], flag=False))
    await call.answer()


@dp.callback_query_handler(text_contains="accept")
async def trow_dice(call: CallbackQuery):  # –ë—Ä–æ—Å–æ–∫ –∫–æ—Å—Ç–∏
    game_id = call.data.split(":")[1]
    if database.check_balance(call.message.chat.id, game_id):
        res = await bot.send_dice(call.message.chat.id, reply_markup=keyboards.inline.remove_keyboard())
        await asyncio.sleep(3.5)
        if res.dice.value <= 3:
            won = False
            await call.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(", show_alert=True)
        else:
            won = True
            await call.answer(text="–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!!!", show_alert=True)
        amount = database.kill_game(game_id, call.message.chat.id, won, res.dice.value, call.message.chat.username)
        if won:
            await bot.send_message(call.message.chat.id,
                                   f"üèÅ–ò–≥—Ä–∞ ‚Ññ{game_id} –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                                   f"–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: {res.dice.value}\n"
                                   f"–°—É–º–º–∞ –∏–≥—Ä—ã: {amount} —Ä—É–±\n"
                                   f"--------------------------\n"
                                   f"üèÜ–í—ã –ø–æ–±–µ–¥–∏–ª–∏!!!\n"
                                   f"üßæ–í–∞—à –≤—ã–∏–≥—Ä—ã—à: {amount * 2}")
        else:
            await bot.send_message(call.message.chat.id,
                                   f"–ò–≥—Ä–∞ ‚Ññ{game_id} –æ–∫–æ–Ω—á–µ–Ω–∞!\n"
                                   f"–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: {res.dice.value}\n"
                                   f"–°—É–º–º–∞ –∏–≥—Ä—ã: {amount} —Ä—É–±\n"
                                   f"--------------------------\n"
                                   f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏(")
    else:
        await call.answer(show_alert=True, text="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É(")
        await bot.edit_message_text(text="–°–ø–∏—Å–æ–∫ –∏–≥—Ä",
                                    message_id=call.message.message_id,
                                    chat_id=call.message.chat.id,
                                    reply_markup=keyboards.inline.games_markup(database.gen_games()))


@dp.callback_query_handler(text="create")
async def new_game(call: CallbackQuery):  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    await States.Create_Game.set()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏\n"
                                     f"–í–∞—à –±–∞–ª–∞–Ω—Å: "
                                     f"{database.check_balance(user_id=call.message.chat.id, flag=False)}",
                                reply_markup=keyboards.inline.back_button())
    await call.answer()


@dp.callback_query_handler(text="stats")
async def give_stats(call: CallbackQuery):
    stats = database.give_stats(call.message.chat.id)
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–∏—Ö –∏–≥—Ä:\n"
                                     f"üé≤–í—Å–µ–≥–æ –∏–≥—Ä: {stats[0]}\n"
                                     f"üèÜ–ü–æ–±–µ–¥: {stats[1]}\n"
                                     f"ü•¥–ü–æ—Ä–∞–∂–µ–Ω–∏–π: {stats[2]}\n"
                                     f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                     f"–§–∏–Ω–∞–Ω—Å—ã \n"
                                     f"üèÜ–í—ã–∏–≥—Ä–∞–Ω–æ: {stats[3]} —Ä—É–±\n"
                                     f"üóë –ü—Ä–æ–∏–≥—Ä–∞–Ω–æ: {stats[4]} —Ä—É–±\n\n"
                                     f"üìâ–°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞: {int(stats[6])}\n"
                                     f"üßæ–ü—Ä–æ—Ñ–∏—Ç: {stats[5]} —Ä—É–±",
                                reply_markup=keyboards.inline.back_button(flag=True))
    await call.answer()


@dp.callback_query_handler(text="pay")
async def choose_payment_method(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ—Ä–µ–∑ –∫–∞–∫—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                reply_markup=keyboards.inline.choose_payments())
    await call.answer()


@dp.callback_query_handler(text="withdraw")
async def withdraw_check(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É",
                                reply_markup=keyboards.inline.choose_withdraw())
    await call.answer()


@dp.callback_query_handler(text="qiwi_api")
async def qiwi_pay_menu(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f'''–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
ü•ù QIWI-–∫–æ—à–µ–ª–µ–∫: {config.QIWI_NUMBER}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {call.message.chat.id}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∏–≤–∏ –∫–æ—à–µ–ª—ë–∫ –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É.
–ü–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤–µ—Ä—à—ë–Ω —Å –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞.
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ —Ä—É–±–ª—è—Ö.

‚õîÔ∏è –ü—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–ï–ó –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
–ú–∞–Ω–∏–±—ç–∫–∞ –ù–ï –ø–æ—Å–ª–µ–¥—É–µ—Ç.
–ù–µ —Ç—Ä–∞—Ç—å—Ç–µ –Ω–∏ —Å–≤–æ—ë, –Ω–∏ –Ω–∞—à–µ –≤—Ä–µ–º—è.

–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –≤–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –ª–∏—à—å —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞.''',
                                reply_markup=keyboards.inline.qiwi_payment(call.message.chat.id))
    await call.answer()


@dp.callback_query_handler(text="check_pay")
async def check_qiwi_pay(call: CallbackQuery):
    res = qiwi.qiwi_check(call.message.chat.id)
    if type(res) == tuple:
        await call.answer(text=f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {res[1]} —Ä—É–±!", show_alert=True)
        await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        database.update_balance(user_id=call.message.chat.id, amount=res[1], sign="+")
        telebot_part.send_payment_info(res[1], call.message.chat.username)
    elif res:
        await call.answer(text=f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {round(res)} —Å–µ–∫, —á—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É")
    else:
        await call.answer(text=f"–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


@dp.callback_query_handler(text="qiwi_withdraw")
async def choose_qiwi(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞(–±–µ–∑ +) –¥–ª—è –≤—ã–≤–æ–¥–∞")
    await call.answer()
    await States.Withdraw_Qiwi_Choose.set()


@dp.callback_query_handler(text="withdraw_all", state=States.Withdraw_Amount)
async def withdraw_all(call: CallbackQuery, state: FSMContext):
    balance = database.check_balance(flag=False, user_id=call.message.chat.id)
    if balance > 0:
        data = await state.get_data()
        purse = data.get("purse")
        await bot.edit_message_text(chat_id=call.message.chat.id,
                                    message_id=call.message.message_id,
                                    text=f"–ö–æ–º–º–∏—Å–∏—è: 10%\n"
                                         f"–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: {balance - balance / 10}\n"
                                         f"–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞: {purse}\n\n"
                                         f"–í—ã–≤–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.\n"
                                         f"–î–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
                                         f"‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥.",
                                    reply_markup=keyboards.inline.agree_to_withdraw(balance, purse))
        await state.finish()
    else:
        await call.answer(text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥")
        await bot.delete_message(chat_id=call.message.chat.id,
                                 message_id=call.message.message_id)
        await state.finish()


@dp.callback_query_handler(text_contains="agree")
async def agree_to_withdraw(call: CallbackQuery):  # –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
    data = call.data.split(":")
    purse = data[1]
    amount = int(data[2])
    telebot_part.send_withdraw_info(amount, call.message.chat.username)
    await call.answer(text="–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    pays.new_withdraw_request(purse, amount - amount / 10)
    database.update_balance(call.message.chat.id, amount, "-")
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)


@dp.callback_query_handler(text="back")
async def back_button(call: CallbackQuery):  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await bot.edit_message_text(text='''üéÆ –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∏–≥—Ä—É –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∏–≥—Ä—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:
1. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!
2. –°–æ–ø–µ—Ä–Ω–∏–∫, –ø—Ä–∏–Ω—è–≤—à–∏–π –∏–≥—Ä—É, –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫ üé≤
3. –í—ã–ø–∞–≤—à–∞—è —Ü–∏—Ñ—Ä–∞ –±–æ–ª—å—à–µ 3.5 –ø–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏!
4. –í—ã–ø–∞–≤—à–∞—è —Ü–∏—Ñ—Ä–∞ –º–µ–Ω—å—à–µ 3.5 –ø–æ–±–µ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!
üéØ –ü–æ–≥–Ω–∞–ª–∏?''',
                                message_id=call.message.message_id,
                                chat_id=call.message.chat.id,
                                reply_markup=keyboards.inline.game_or_stats_markup())
    await call.answer()


@dp.callback_query_handler(text="back1")
async def cancel_game(call: CallbackQuery):  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä
    await bot.edit_message_text(text="üé≠ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:",
                                message_id=call.message.message_id,
                                chat_id=call.message.chat.id,
                                reply_markup=keyboards.inline.games_markup(database.gen_games()))
    await call.answer()


@dp.callback_query_handler(text="back2", state=States.Create_Game)
async def cancel_create_game(call: CallbackQuery, state: FSMContext):  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –≤ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä
    await bot.edit_message_text(text=" –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã:",
                                message_id=call.message.message_id,
                                chat_id=call.message.chat.id,
                                reply_markup=keyboards.inline.games_markup(database.gen_games()))
    await call.answer()
    await state.finish()
    await call.answer()


@dp.callback_query_handler(text="back3", state="*")
async def cancel_pay(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text=f"–í–∞—à –±–∞–ª–∞–Ω—Å: {database.check_balance(flag=False, user_id=call.message.chat.id)}",
                                reply_markup=keyboards.inline.pay_or_withdraw())
    await call.answer()


@dp.callback_query_handler(text="back4")
async def cancel_qiwi_pay(call: CallbackQuery):
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ—Ä–µ–∑ –∫–∞–∫—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                                reply_markup=keyboards.inline.choose_payments())
    await call.answer()


@dp.callback_query_handler(text="backadminpanel", state="*")
async def back_to_admin_panel(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_text(chat_id=call.message.chat.id,
                                message_id=call.message.message_id,
                                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!",
                                reply_markup=Admin_Keyboards.in_admin_panel())
    await call.answer()


@dp.message_handler(state=Admin.Mailing)
async def mailing(message: types.message, state: FSMContext):
    lst = database.get_users_id()
    msg = await bot.send_message(chat_id=-1001209512088, text=message.text)
    for elem in lst:
        try:
            await bot.forward_message(chat_id=elem[0],
                                      from_chat_id=-1001209512088,
                                      message_id=msg.message_id)
        except Exception as e:
            print(e)
    await state.finish()
    await bot.send_message(message.chat.id,
                           "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                           reply_markup=Admin_Keyboards.in_admin_panel())


@dp.message_handler(content_types=["photo"], state=Admin.Mailing)
async def mailing(message: types.message, state: FSMContext):
    lst = database.get_users_id()
    msg = await bot.send_photo(chat_id=-1001209512088, photo=message.photo[0].file_id, caption=message.caption)
    for elem in lst:
        try:
            await bot.forward_message(chat_id=elem[0],
                                      from_chat_id=-1001209512088,
                                      message_id=msg.message_id)
        except Exception as e:
            print(e)
    await state.finish()
    await bot.send_message(message.chat.id,
                           "–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                           reply_markup=Admin_Keyboards.in_admin_panel())


@dp.message_handler()
async def main(message: types.message):  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text == "üïπ–ò–≥—Ä—ã":
        await bot.send_message(message.chat.id,
                               '''üéÆ –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –∏–≥—Ä—É –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∏–≥—Ä—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:
1. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!
2. –°–æ–ø–µ—Ä–Ω–∏–∫, –ø—Ä–∏–Ω—è–≤—à–∏–π –∏–≥—Ä—É, –∫–∏–¥–∞–µ—Ç –∫—É–±–∏–∫ üé≤
3. –í—ã–ø–∞–≤—à–∞—è —Ü–∏—Ñ—Ä–∞ –±–æ–ª—å—à–µ 3.5 - –ø–æ–±–µ–¥–∞ –∑–∞ –≤–∞–º–∏!
4. –í—ã–ø–∞–≤—à–∞—è —Ü–∏—Ñ—Ä–∞ –º–µ–Ω—å—à–µ 3.5 - –ø–æ–±–µ–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!
üéØ –ü–æ–≥–Ω–∞–ª–∏?!''',
                               reply_markup=keyboards.inline.game_or_stats_markup())
    elif message.text == "üí≥–ë–∞–ª–∞–Ω—Å":
        await bot.send_message(message.chat.id,
                               f"üè∑–í–∞—à –±–∞–ª–∞–Ω—Å: {database.check_balance(flag=False, user_id=message.chat.id)}",
                               reply_markup=keyboards.inline.pay_or_withdraw())
    elif message.text == "üõë–ü–æ–º–æ—â—å|FAQ":
        await message.answer("https://telegra.ph/PomoshchFAQ-07-03")


@dp.message_handler(state=States.Create_Game)
async def create_game(message: types.message, state: FSMContext):  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∏–≥—Ä
    try:
        numb = int(message.text)
        if numb > 0:
            result = database.create_new_game(message.chat.id, numb, message.from_user.username)
            if result == "0":
                await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∏–≥—Ä—É. –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏)")
                await state.finish()
            elif result == "1":
                await bot.send_message(message.chat.id,
                                       "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö –∏–≥—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!",
                                       reply_markup=keyboards.inline.back_button())
            elif result == "2":
                await bot.send_message(message.chat.id,
                                       "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤",
                                       reply_markup=keyboards.inline.back_button())
        else:
            await bot.send_message(message.chat.id,
                                   "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!",
                                   reply_markup=keyboards.inline.back_button())
    except ValueError:
        markup = types.InlineKeyboardMarkup(row_width=1)
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back2"))
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=markup)


@dp.message_handler(state=States.Withdraw_Qiwi_Choose)
async def insert_qiwi(message: types.message, state: FSMContext):
    try:
        purse = int(message.text)
        await bot.send_message(chat_id=message.chat.id,
                               text=f"‚úÖ Qiwi –∫–æ—à–µ–ª–µ–∫: {purse}\n"
                                    f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: {database.check_balance(flag=False, user_id=message.chat.id)}\n"
                                    f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É",
                               reply_markup=keyboards.inline.choose_withdraw_1())
        await state.update_data(purse=purse)
        await States.Withdraw_Amount.set()
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back3")
        markup.add(btn1)
        await bot.send_message(chat_id=message.chat.id,
                               text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ—à–µ–ª–µ–∫!",
                               reply_markup=markup)


@dp.message_handler(state=States.Withdraw_Amount)
async def insert_amount(message: types.message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount > 1:
            if database.check_balance(user_id=message.chat.id, flag=False) >= amount:
                data = await state.get_data()
                purse = data.get("purse")
                await bot.send_message(chat_id=message.chat.id,
                                       text=f"–ö–æ–º–º–∏—Å–∏—è: 10%\n"
                                            f"–°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: {amount - amount / 10}\n"
                                            f"–ö–æ—à–µ–ª–µ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞: {purse}\n\n"
                                            f"–í—ã–≤–æ–¥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ø–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.\n"
                                            f"–î–µ–Ω—å–≥–∏ –ø—Ä–∏–¥—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n"
                                            f"‚ùóÔ∏è–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–≤–æ–¥.",
                                       reply_markup=keyboards.inline.agree_to_withdraw(amount, purse))
                await state.finish()
            else:
                markup = types.InlineKeyboardMarkup(row_width=1)
                btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="back3")
                markup.add(btn1)
                await bot.send_message(chat_id=message.chat.id,
                                       text="–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥",
                                       reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn1 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥", callback_data="back3")
            markup.add(btn1)
            await bot.send_message(chat_id=message.chat.id,
                                   text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 2 —Ä—É–±–ª—è",
                                   reply_markup=markup)
    except ValueError:
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn1 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back3")
        markup.add(btn1)
        await bot.send_message(message.chat.id,
                               "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É",
                               reply_markup=markup)


async def on_start(dp):
    await telebot_part.on_startup_notify(dp)


if __name__ == '__main__':
    executor.start_polling(dispatcher=dp, on_startup=on_start)
